#!/bin/bash
#	マイクラマルチサーバー管理
set -eu

# defaults
SESSION='mc'
VERSION='1.16.2'
MAX_MEM='4G'

if [ ! -r ./config ]; then
	cat >./config <<-EOT
	# minecraft(Java Edition) version
	VERSION=${VERSION}

	# maximum memory
	MAX_MEM=${MAX_MEM}
	EOT
fi
source ./config

MC_DIR=/srv/minecraft
if [ ! -d $MC_DIR ]; then
       echo "not found ${MC_DIR}" 1>&2
       exit 1
fi

BUILD_DIR=${MC_DIR}/buildtools
URL='https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar'

STARTUP=${MC_DIR}/startup-${VERSION}

LOG_DIR=${MC_DIR}/logs
STDERR=${MC_DIR}/stderr

BACKUP_DIR=${MC_DIR}/backups


function usage_exit() {
cat <<EOT
(minecraft server ctl)

mcsctl [OPTIONS..] {COMMAND} ...

	-v <version>    (default: ${VERSION})

	-m <max_memory> (default: ${MAX_MEM})

Unit Commands:
	active
	status
	update
	autoupdate
	generate
	start
	stop
	say	<message>
	nologin
	backup  all|<world name>
	remove  <days>
EOT
exit 0
}
[[ $UID -ne 0 || $# -eq 0 ]] && usage_exit

function screen_is_active() {
  if [ ! -e /run/screen/S-root ]; then
    return 1
  fi
	# $1: session_name
	local socket=$(find /run/screen/S-root/ -name "*.${1}")
	[ -n "${socket}" ] && return 0 || return 1
}

function launch_screen() {
	# $1: session_name
	screen_is_active $1 || screen -d -m -S $1
}

function send_string() {
	# $1: session_name
	# $2: string
	screen -S "$1" -X stuff "$2\n"
}

function mcs_is_active() {
	pgrep -f "spigot-" &>/dev/null && return 0 || return 1
}

function show_status() {
	mcs_is_active && echo "active" || echo "non-active"
}

function get_buildtools() {
	curl -o ${BUILD_DIR}/BuildTools.jar ${URL}
}

function is_outdated() {
	[ ! -e $STDERR ] && return 1
	grep "this build is outdated" $STDERR &>/dev/null
}

function update_spigot() {
	get_buildtools
	find ${BUILD_DIR}/ -maxdepth 1 -name 'spigot-*.jar'| xargs rm -f
	(cd ${BUILD_DIR} && java -jar BuildTools.jar -rev ${VERSION})

	find ${MC_DIR}/ -maxdepth 1 -name 'spigot-*.jar'| xargs rm -f
	cp -f "${BUILD_DIR}/spigot-${VERSION}.jar" ${MC_DIR}/
}

function generate_startup() {
	spigot="spigot-${VERSION}.jar"
	[ ! -e ${MC_DIR}/${spigot} ] && update_spigot
	
	find ${MC_DIR}/ -maxdepth 1 -name 'startup-*'| xargs rm -f
	cat >${STARTUP} <<-EOT
	#!/bin/bash

	java -Xmx${MAX_MEM} -Xms${MAX_MEM} -jar ${spigot} nogui 
	EOT
	chmod +x ${STARTUP}

  EULA="${MC_DIR}/eula.txt"
  if [ ! -e $EULA ]; then
    echo 'eula=true' >$EULA
  fi
}

function start_mcs() {
	mcs_is_active && return 0
	[ ! -e ${STARTUP} ] && generate_startup
	launch_screen ${SESSION}
	send_string ${SESSION} "cd ${MC_DIR} && ./$(basename ${STARTUP}) 2>${STDERR}"
}

function stop_mcs() {
	send_string ${SESSION} "stop"
	rm -f ${STDERR}
}

function say() {
	# $1: message
	mcs_is_active && send_string ${SESSION} "say $1"
}

function backup_world() {
	# $1: world name

	if mcs_is_active; then
		echo "E: server is active, please stop first." 1>&2
		return 1
	fi

	local source_dir="${MC_DIR}/$1"
	if [ ! -d $source_dir ]; then
		echo "E: not found such a world (name = $1)." 1>&2
		return 1
	fi

	[ ! -e $BACKUP_DIR ] && mkdir $BACKUP_DIR
	local backup_file="${BACKUP_DIR}/${1}_$(date +%Y%m%d).tar.gz"
	tar -czf ${backup_file} ${source_dir}/
}

function backup_all_world() {
	# -*- ワールド名に'world'を含んでいるとする -*-
	find ${MC_DIR} -maxdepth 1 -name '*world*'| while read line; do
		backup_world $(basename ${line})
	done
}

function remove_backup_files() {
	#  $1: day
	if [[ ! "$1" =~ ^\+ ]]; then
		echo "E: the argument should start with +" 1>&2
		return 1
	fi
	find -L ${BACKUP_DIR} -mtime ${1} -name "*.tar.gz"| xargs rm -f
}

function is_nologin() {
	local header=$(date --date 'yesterday' "+%Y-%m-%d")
  # ファイルが存在しない場合も0を返す?
	! zcat ${LOG_DIR}/${header}-*.log.gz| grep "User Auth" &>/dev/null
}


while getopts v:m:p:h OPT; do
	case $OPT in 
		v) VERSION=$OPTARG;;
		m) MAX_MEM=$OPTARG;;
		h) usage_exit;;
	esac
done
shift $(($OPTIND - 1))

case "$1" in
	'active')
		mcs_is_active
		;;

	'status')
		show_status
		;;

	'update')
		update_spigot
		;;

	'autoupdate')
		is_outdated && update_spigot
		;;

	'generate')
		generate_startup
		;;

	'start')
		start_mcs
		;;

	'stop')
		stop_mcs
		;;

	'say')
		[ -z "$2" ] && usage_exit
		say "$2"
		;;

	'nologin')
		is_nologin
		;;

	'backup')
		[ -z "$2" ] && usage_exit
		case "$2" in
			'all')
				backup_all_world
				;;
			*)
				backup_world "$2"
				;;
		esac
		;;

	'remove')
		[ -z "$2" ] && usage_exit
		remove_backup_files $2
		;;

	*)
		usage_exit
		;;
esac
